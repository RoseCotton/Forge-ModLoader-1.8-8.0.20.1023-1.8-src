


package com.rosecotton.shelvesmod;
import java.util.Arrays;

import net.minecraft.block.BlockChest;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.IInventory;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTTagCompound;
//import net.minecraft.network.INetworkManager;
import net.minecraft.network.Packet;
//import net.minecraft.network.packet.Packet132TileEntityData;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.ChatComponentText;
import net.minecraft.util.ChatComponentTranslation;
import net.minecraft.util.IChatComponent;
import net.minecraft.world.World;
import net.minecraft.nbt.NBTTagList;

public class ShelfTitleEntity extends TileEntity implements IInventory {
	final static int NUMBER_OF_SLOTS = 4;
    public int numPlayersUsing;
	public static ItemStack[] itemStacks = new ItemStack[NUMBER_OF_SLOTS];
	public EntityItem itemEnt[] = null;

	// will add a key for this container to the lang file so we can name it in the GUI
	@Override
	public String getName() {
		return "Block Shelf";
	}

	@Override
	public boolean hasCustomName() {
		return false;
	}
	
	// standard code to look up what the human-readable name is
	@Override
	public IChatComponent getDisplayName() {
		return this.hasCustomName() ? new ChatComponentText(this.getName()) : new ChatComponentTranslation(this.getName());
	}
	
	@Override
	public int getSizeInventory() {
		return itemStacks.length;
	}
	/*
	public void markDirty() {
		super.markDirty();
		if(worldObj != null && itemStacks[0] != null && itemStacks[1] != null && itemStacks[2] != null && itemStacks[3] != null ) {
			itemEnt[0] = new EntityItem(this.worldObj, this.xCoord, this.yCoord, this.zCoord, itemStacks[0]);
			itemEnt[0].hoverStart = 0;
			itemEnt[0].rotationYaw = 0;
			itemEnt[0].motionX = 0;
			itemEnt[0].motionY = 0;
			itemEnt[0].motionZ = 0;			
			itemEnt[1] = new EntityItem(this.worldObj, this.xCoord, this.yCoord, this.zCoord, itemStacks[1]);
			itemEnt[1].hoverStart = 0;
			itemEnt[1].rotationYaw = 0;
			itemEnt[1].motionX = 0;
			itemEnt[1].motionY = 0;
			itemEnt[1].motionZ = 0;			
			itemEnt[2] = new EntityItem(this.worldObj, this.xCoord, this.yCoord, this.zCoord, itemStacks[2]);
			itemEnt[2].hoverStart = 0;
			itemEnt[2].rotationYaw = 0;
			itemEnt[2].motionX = 0;
			itemEnt[2].motionY = 0;
			itemEnt[2].motionZ = 0;			
			itemEnt[3] = new EntityItem(this.worldObj, this.xCoord, this.yCoord, this.zCoord, itemStacks[3]);
			itemEnt[3].hoverStart = 0;
			itemEnt[3].rotationYaw = 0;
			itemEnt[3].motionX = 0;
			itemEnt[3].motionY = 0;
			itemEnt[3].motionZ = 0;
		}
		else {
			itemEnt = null;
		}
	}
	*/

	
	@Override
	public ItemStack getStackInSlot(int slotIndex) {
		return itemStacks[slotIndex];
		}
	
	@Override
	public ItemStack decrStackSize(int slotIndex, int count) {
		ItemStack itemStackInSlot = getStackInSlot(slotIndex);
		if (itemStackInSlot == null) return null;
	
		ItemStack itemStackRemoved;
		if (itemStackInSlot.stackSize <= count) {
			itemStackRemoved = itemStackInSlot;
			setInventorySlotContents(slotIndex, null);
		} else {
			itemStackRemoved = itemStackInSlot.splitStack(count);
			if (itemStackInSlot.stackSize == 0) {
				setInventorySlotContents(slotIndex, null);
			}
		}
	  markDirty();
		return itemStackRemoved;
	}
	
	// -----------------------------------------------------------------------------------------------------------
	// The following method is not needed for this example but are part of IInventory so must be implemented
	/**
	 * This method removes the entire contents of the given slot and returns it.
	 * Used by containers such as crafting tables which return any items in their slots when you close the GUI
	 * @param slotIndex
	 * @return
	 */
	@Override
	public ItemStack getStackInSlotOnClosing(int slotIndex) {
		ItemStack itemStack = getStackInSlot(slotIndex);
		if (itemStack != null) setInventorySlotContents(slotIndex, null);
		return itemStack;
	}
	
	// overwrites the stack in the given slotIndex with the given stack
	@Override
	public void setInventorySlotContents(int slotIndex, ItemStack itemstack) {
		itemStacks[slotIndex] = itemstack;
		if (itemstack != null && itemstack.stackSize > getInventoryStackLimit()) {
			itemstack.stackSize = getInventoryStackLimit();
		}
		markDirty();
	}
	
	// This is the maximum number if items allowed in each slot
	// This only affects things such as hoppers trying to insert items you need to use the container to enforce this for players
	// inserting items via the gui
	@Override
	public int getInventoryStackLimit() {
		return 64;
	}
	
	// Return true if the given player is able to use this block. In this case it checks that
	// 1) the world tileentity hasn't been replaced in the meantime, and
	// 2) the player isn't too far away from the centre of the block
	@Override
	public boolean isUseableByPlayer(EntityPlayer player) {
		if (this.worldObj.getTileEntity(this.pos) != this) return false;
		final double X_CENTRE_OFFSET = 0.5;
		final double Y_CENTRE_OFFSET = 0.5;
		final double Z_CENTRE_OFFSET = 0.5;
		final double MAXIMUM_DISTANCE_SQ = 8.0 * 8.0;
		return player.getDistanceSq(pos.getX() + X_CENTRE_OFFSET, pos.getY() + Y_CENTRE_OFFSET, pos.getZ() + Z_CENTRE_OFFSET) < MAXIMUM_DISTANCE_SQ;
	}
	
	//-----------------------------------------------------------------------------------------------------------
	//The following method is not needed for this example but are part of IInventory so must be implemented
	@Override
	public void openInventory(EntityPlayer player) {
	    if (!player.isSpectator())
	    {
	        if (this.numPlayersUsing < 0)
	        {
	            this.numPlayersUsing = 0;
	        }
	
	        ++this.numPlayersUsing;
	        this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
	        this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
	        this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
	    	System.out.println("Called method: ShelfTitleEntity.openInventory");
	    }
	}
	
	//-----------------------------------------------------------------------------------------------------------
	//The following method is not needed for this example but are part of IInventory so must be implemented
	@Override
	public void closeInventory(EntityPlayer player) {
	    if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
	    {
	        --this.numPlayersUsing;
	        this.worldObj.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
	        this.worldObj.notifyNeighborsOfStateChange(this.pos, this.getBlockType());
	        this.worldObj.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType());
	    }
	}
	
	// Return true if the given stack is allowed to go in the given slot.  In this case, we can insert anything.
	// This only affects things such as hoppers trying to insert items you need to use the container to enforce this for players
	// inserting items via the gui
	@Override
	public boolean isItemValidForSlot(int slotIndex, ItemStack itemstack) {
		return true;
	}
	
	
	// This is where you save any data that you don't want to lose when the tile entity unloads
	// In this case, it saves the itemstacks stored in the container
	@Override
	public void writeToNBT(NBTTagCompound parentNBTTagCompound)
	{
		super.writeToNBT(parentNBTTagCompound); // The super call is required to save and load the tileEntity's location
	
		// to use an analogy with Java, this code generates an array of hashmaps
		// The itemStack in each slot is converted to an NBTTagCompound, which is effectively a hashmap of key->value pairs such
		//   as slot=1, id=2353, count=1, etc
		// Each of these NBTTagCompound are then inserted into NBTTagList, which is similar to an array.
		NBTTagList dataForAllSlots = new NBTTagList();
		for (int i = 0; i < this.itemStacks.length; ++i) {
			if (this.itemStacks[i] != null)	{
				NBTTagCompound dataForThisSlot = new NBTTagCompound();
				dataForThisSlot.setByte("Slot", (byte) i);
				this.itemStacks[i].writeToNBT(dataForThisSlot);
				dataForAllSlots.appendTag(dataForThisSlot);
			}
		}
		// the array of hashmaps is then inserted into the parent hashmap for the container
		parentNBTTagCompound.setTag("Items", dataForAllSlots);
	}
	
	// This is where you load the data that you saved in writeToNBT
	@Override
	public void readFromNBT(NBTTagCompound parentNBTTagCompound)
	{
		super.readFromNBT(parentNBTTagCompound); // The super call is required to save and load the tiles location
	
		final byte NBT_TYPE_COMPOUND = 10;       // See NBTBase.createNewByType() for a listing
		NBTTagList dataForAllSlots = parentNBTTagCompound.getTagList("Items", NBT_TYPE_COMPOUND);
	
		Arrays.fill(itemStacks, null);           // set all slots to empty
		for (int i = 0; i < dataForAllSlots.tagCount(); ++i) {
			NBTTagCompound dataForOneSlot = dataForAllSlots.getCompoundTagAt(i);
			int slotIndex = dataForOneSlot.getByte("Slot") & 255;
	
			if (slotIndex >= 0 && slotIndex < this.itemStacks.length) {
				this.itemStacks[slotIndex] = ItemStack.loadItemStackFromNBT(dataForOneSlot);
			}
		}
	}
	
	public boolean receiveClientEvent(int id, int type)
	{
	    if (id == 1)
	    {
	        this.numPlayersUsing = type;
	        return true;
	    }
	    else
	    {
	        return super.receiveClientEvent(id, type);
	    }
	}
	
	@Override
	public int getField(int id) {
		return Item.getIdFromItem(itemStacks[id].getItem());
	}
	
	@Override
	public void setField(int id, int value) {
		itemStacks[id].setItem(Item.getItemById(value));
	}
	
	@Override
	public int getFieldCount() {
		return itemStacks.length;
	}
	
	// set all slots to empty
	@Override
	public void clear() {
		Arrays.fill(itemStacks, null);
	}
}

